{"version":3,"sources":["../../src/ar/arNFT.js"],"names":["ArMarkerControls","useFrame","React","useEffect","useRef","useState","useAR","ARNft","children","type","descriptorsUrl","params","onMarkerFound","onMarkerLost","markerRoot","arToolkitContext","isFound","setIsFound","markerControls","current","index","_arMarkersControls","indexOf","splice","visible"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,SAASA,gBAAT,QAAiC,+CAAjC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,KAAT,QAAsB,MAAtB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAOR;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,uBALJC,IAKI;AAAA,MALJA,IAKI,0BALG,KAKH;AAAA,MAJJC,cAII,QAJJA,cAII;AAAA,MAHJC,MAGI,QAHJA,MAGI;AAAA,MAFJC,aAEI,QAFJA,aAEI;AAAA,MADJC,YACI,QADJA,YACI;AACJ,MAAMC,UAAU,GAAGV,MAAM,EAAzB;;AACA,eAA6BE,KAAK,EAAlC;AAAA,MAAQS,gBAAR,UAAQA,gBAAR;;AACA,kBAA8BV,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOW,OAAP;AAAA,MAAgBC,UAAhB;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACY,gBAAL,EAAuB;AAAE;AAAQ;;AAEjC,QAAMG,cAAc,GAAG,IAAIlB,gBAAJ,CAAqBe,gBAArB,EAAuCD,UAAU,CAACK,OAAlD;AACrBV,MAAAA,IAAI,EAAJA,IADqB;AAErBC,MAAAA,cAAc,EAAdA;AAFqB,OAGlBC,MAHkB,EAAvB;AAMA,WAAO,YAAM;AACX,UAAMS,KAAK,GAAGL,gBAAgB,CAACM,kBAAjB,CAAoCC,OAApC,CAA4CJ,cAA5C,CAAd;;AACAH,MAAAA,gBAAgB,CAACM,kBAAjB,CAAoCE,MAApC,CAA2CH,KAA3C,EAAkD,CAAlD;AACD,KAHD;AAID,GAbQ,EAaN,CAACL,gBAAD,EAAmBL,cAAnB,EAAmCC,MAAnC,EAA2CF,IAA3C,CAbM,CAAT;AAeAR,EAAAA,QAAQ,CAAC,YAAM;AACb,QAAIa,UAAU,CAACK,OAAX,CAAmBK,OAAnB,IAA8B,CAACR,OAAnC,EAA4C;AAC1CC,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAIL,aAAJ,EAAmB;AAACA,QAAAA,aAAa;AAAG;AACrC,KAHD,MAGO,IAAI,CAACE,UAAU,CAACK,OAAX,CAAmBK,OAApB,IAA+BR,OAAnC,EAA4C;AACjDC,MAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,UAAIJ,YAAJ,EAAkB;AAACA,QAAAA,YAAY;AAAG;AACnC;AACF,GARO,CAAR;AAUA,sBACE;AAAO,IAAA,GAAG,EAAGC;AAAb,KACIN,QADJ,CADF;AAKD,CA1CD;;AA4CA,eAAeD,KAAf","sourcesContent":["/* eslint-disable no-underscore-dangle */\r\nimport { ArMarkerControls } from \"@ar-js-org/ar.js/three.js/build/ar-threex-nft\"\r\nimport { useFrame } from \"@react-three/fiber\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { useAR } from \"./ar\"\r\n\r\nconst ARNft = ({\r\n  children,\r\n  type = \"nft\",\r\n  descriptorsUrl,\r\n  params,\r\n  onMarkerFound,\r\n  onMarkerLost\r\n}) => {\r\n  const markerRoot = useRef()\r\n  const { arToolkitContext } = useAR()\r\n  const [isFound, setIsFound] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!arToolkitContext) { return }\r\n\r\n    const markerControls = new ArMarkerControls(arToolkitContext, markerRoot.current, {\r\n      type,\r\n      descriptorsUrl,\r\n      ...params\r\n    })\r\n\r\n    return () => {\r\n      const index = arToolkitContext._arMarkersControls.indexOf(markerControls)\r\n      arToolkitContext._arMarkersControls.splice(index, 1)\r\n    }\r\n  }, [arToolkitContext, descriptorsUrl, params, type])\r\n\r\n  useFrame(() => {\r\n    if (markerRoot.current.visible && !isFound) {\r\n      setIsFound(true)\r\n      if (onMarkerFound) {onMarkerFound()}\r\n    } else if (!markerRoot.current.visible && isFound) {\r\n      setIsFound(false)\r\n      if (onMarkerLost) {onMarkerLost()}\r\n    }\r\n  })\r\n\r\n  return (\r\n    <group ref={ markerRoot }>\r\n      { children }\r\n    </group>\r\n  )\r\n}\r\n\r\nexport default ARNft\r\n"],"file":"arNFT.js"}